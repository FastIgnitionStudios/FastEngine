using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using FastReflection.Types;

namespace FastReflection.CodeGen
{
    public class HeaderSourceGenerator
    {
        public void GenerateReflectionCode(List<ReflectedClass> classes, string outputDir)
        {
            foreach (var reflectedClass in classes)
            {
                GenerateHeaderFile(reflectedClass, outputDir);
                GenerateSourceFile(reflectedClass, outputDir);
            }
        }

        public void GenerateHeaderFile(ReflectedClass reflectedClass, string outputDir)
        {
            var sb = new StringBuilder();
            
            sb.AppendLine("/* GENERATED BY FASTREFLECTION */");
            sb.AppendLine("");
            sb.AppendLine("#pragma once");
            sb.AppendLine("#include <Core.h>");
            sb.AppendLine("");
            
            // Generate type registration declaration
            sb.AppendLine($"// Reflection data for: {reflectedClass.Name} in namespace: {reflectedClass.Namespace}");
            
            if (!string.IsNullOrEmpty(reflectedClass.Namespace))
            {
                sb.AppendLine($"namespace {reflectedClass.Namespace}");
                sb.AppendLine("{");
            }
            
            
            sb.AppendLine();
            sb.AppendLine($"    // Forward declare native class");
            sb.AppendLine($"    {reflectedClass.ClassType} {reflectedClass.Name};");
            sb.AppendLine($"    template <> const char* GetClassName<{reflectedClass.Name}>();");
            sb.AppendLine();

            
            if (!string.IsNullOrEmpty(reflectedClass.Namespace))
            {
                sb.AppendLine("}");
            }
            
            sb.AppendLine();
            sb.AppendLine($"// Reflection macro for: {reflectedClass.Name} in namespace: {reflectedClass.Namespace}");
            
            
            var outputPath = Path.Combine(outputDir, $"{reflectedClass.SourceFile.Split("\\").Last().Split(".").First()}_RGen.h");
            File.WriteAllText(outputPath, sb.ToString());
        }

        public void GenerateSourceFile(ReflectedClass reflectedClass, string outputDir)
        {
            var sb = new StringBuilder();
            
            sb.AppendLine("/* GENERATED BY FASTREFLECTION */");
            sb.AppendLine("");
            sb.AppendLine("#include \"EnginePCH.h\"");
            sb.AppendLine($"#include \"{reflectedClass.SourceFile}\"");
            sb.AppendLine("#include <ObjectTypes.h>");
            sb.AppendLine("");
            
            sb.AppendLine($"    void* ConstructClass_Type_{reflectedClass.Name}();");
            
            // Generate type registration declaration
            sb.AppendLine($"// Reflection data for: {reflectedClass.Name} in namespace: {reflectedClass.Namespace}");
            
            if (!string.IsNullOrEmpty(reflectedClass.Namespace))
            {
                sb.AppendLine($"namespace {reflectedClass.Namespace}");
                sb.AppendLine("{");
            }
            
           
            sb.AppendLine();
            sb.AppendLine($"    // Implement templated function");
            sb.AppendLine($"    template <> const char* GetClassName<{reflectedClass.Name}>()");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        return \"{reflectedClass.Name}\";");
            sb.AppendLine($"    }};");
            
            sb.AppendLine($"    void* ConstructClass_Type_{reflectedClass.Name}()");
            sb.AppendLine($"    {{");
            if (reflectedClass.MacroType == "RCOMPONENT")
                sb.AppendLine($"        Scene::RegisterComponentDeferred<{reflectedClass.Name}>();");
            sb.AppendLine($"        return new {reflectedClass.Name}();");
            sb.AppendLine($"    }}");
            
            if (!string.IsNullOrEmpty(reflectedClass.Namespace))
            {
                sb.AppendLine("}");
            }
            
            sb.AppendLine();
            sb.AppendLine($"struct ObjectInitializer_{reflectedClass.Name} {{");
            sb.AppendLine($"    static constexpr ObjectDeferredInitInfo objectInfo[] = {{{{");
            sb.AppendLine($"        {reflectedClass.Namespace}::ConstructClass_Type_{reflectedClass.Name},");
            sb.AppendLine($"        \"{reflectedClass.Name}\"");
            sb.AppendLine($"    }},}};");
            sb.AppendLine($"}};");
            
            sb.AppendLine($"static RegisterObjectDeferred init_{reflectedClass.Name} = RegisterObjectDeferred(&ObjectInitializer_{reflectedClass.Name}::objectInfo[0]);");

    
            
            var outputPath = Path.Combine(outputDir, $"{reflectedClass.SourceFile.Split("\\").Last().Split(".").First()}_RGen.cpp");
            File.WriteAllText(outputPath, sb.ToString());
        }
        
        
        
    }
}